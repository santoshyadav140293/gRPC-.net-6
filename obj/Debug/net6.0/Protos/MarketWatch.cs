// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/MarketWatch.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GrpcService1.Protos {

  /// <summary>Holder for reflection information generated from Protos/MarketWatch.proto</summary>
  public static partial class MarketWatchReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/MarketWatch.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarketWatchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b3MvTWFya2V0V2F0Y2gucHJvdG8SC01hcmtldFdhdGNoIiUKE1Nj",
            "cmlwRGV0YWlsc1JlcXVlc3QSDgoGU3ltYm9sGAEgASgJIkUKFFNjcmlwRGV0",
            "YWlsc1Jlc3BvbnNlEg4KBlN5bWJvbBgBIAEoCRINCgVQcmljZRgCIAEoARIO",
            "CgZWb2x1bWUYAyABKAEiMQoMTG9naW5SZXF1ZXN0Eg8KB0xvZ2luSWQYASAB",
            "KAkSEAoIUGFzc3dvcmQYAiABKAkiHwoNTG9naW5SZXNwb25zZRIOCgZzdGF0",
            "dXMYASABKAkiKAoVU2NyaXBCcm9hZGNhc3RSZXF1ZXN0Eg8KB21lc3NhZ2UY",
            "ASABKAki7gMKGlJlYWxUaW1lTWFya2V0RGF0YVJlc3BvbnNlEhEKCWV2ZW50",
            "VGltZRgBIAEoCRIRCglldmVudFR5cGUYAiABKAUSDgoGc3ltYm9sGAMgASgJ",
            "EhYKDnByaWNlQ2hhbmdlUGVyGAQgASgJEhMKC3ByaWNlQ2hhbmdlGAUgASgJ",
            "EhwKFHdlaWdodGVkQXZlcmFnZVByaWNlGAYgASgJEhIKCmZpcnN0VHJhZGUY",
            "ByABKAkSEQoJY2xvc2VUaW1lGAggASgJEhMKC3F1b3RlVm9sdW1lGAkgASgJ",
            "EhMKC2JpZFF1YW50aXR5GAogASgJEhAKCGJpZFByaWNlGAsgASgJEhMKC2Fz",
            "a1F1YW50aXR5GAwgASgJEhAKCGFza1ByaWNlGA0gASgJEhAKCG9wZW5UaW1l",
            "GA4gASgJEhEKCWhpZ2hQcmljZRgPIAEoCRITCgtsYXN0VHJhZGVJZBgQIAEo",
            "CRISCgpiYXNlVm9sdW1lGBEgASgJEhQKDGxhc3RRdWFudGl0eRgSIAEoCRIR",
            "CglsYXN0UHJpY2UYEyABKAkSEQoJb3BlblByaWNlGBQgASgFEhQKDGZpcnN0",
            "VHJhZGVJZBgVIAEoBRIQCghsb3dQcmljZRgWIAEoBRITCgt0b3RhbFRyYWRl",
            "cxgXIAEoBSIkChFTY3JpcEJyb2FkY2FzdFJlcRIPCgdtZXNzYWdlGAEgASgJ",
            "IikKFlNjcmlwQnJvYWRjYXN0UmVzcG9uc2USDwoHbWVzc2FnZRgBIAEoCTLh",
            "AwoXTWFya2V0V2F0Y2hEYXRhU2VydmljZXMSVQoOR2V0U2NyaXBEZXRhbHMS",
            "IC5NYXJrZXRXYXRjaC5TY3JpcERldGFpbHNSZXF1ZXN0GiEuTWFya2V0V2F0",
            "Y2guU2NyaXBEZXRhaWxzUmVzcG9uc2USXgoVR2V0U2NyaXBEZXRhaWxzU3Ry",
            "ZWFtEiAuTWFya2V0V2F0Y2guU2NyaXBEZXRhaWxzUmVxdWVzdBohLk1hcmtl",
            "dFdhdGNoLlNjcmlwRGV0YWlsc1Jlc3BvbnNlMAESSAoPR2V0TG9naW5EZXRh",
            "aWxzEhkuTWFya2V0V2F0Y2guTG9naW5SZXF1ZXN0GhouTWFya2V0V2F0Y2gu",
            "TG9naW5SZXNwb25zZRJiChFHZXRTY3JpcEJyb2FkY2FzdBIiLk1hcmtldFdh",
            "dGNoLlNjcmlwQnJvYWRjYXN0UmVxdWVzdBonLk1hcmtldFdhdGNoLlJlYWxU",
            "aW1lTWFya2V0RGF0YVJlc3BvbnNlMAESYQoYR2V0U2NyaXBCaW5hbmNlQnJv",
            "YWRjYXN0Eh4uTWFya2V0V2F0Y2guU2NyaXBCcm9hZGNhc3RSZXEaIy5NYXJr",
            "ZXRXYXRjaC5TY3JpcEJyb2FkY2FzdFJlc3BvbnNlMAFCFqoCE0dycGNTZXJ2",
            "aWNlMS5Qcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcService1.Protos.ScripDetailsRequest), global::GrpcService1.Protos.ScripDetailsRequest.Parser, new[]{ "Symbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcService1.Protos.ScripDetailsResponse), global::GrpcService1.Protos.ScripDetailsResponse.Parser, new[]{ "Symbol", "Price", "Volume" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcService1.Protos.LoginRequest), global::GrpcService1.Protos.LoginRequest.Parser, new[]{ "LoginId", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcService1.Protos.LoginResponse), global::GrpcService1.Protos.LoginResponse.Parser, new[]{ "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcService1.Protos.ScripBroadcastRequest), global::GrpcService1.Protos.ScripBroadcastRequest.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcService1.Protos.RealTimeMarketDataResponse), global::GrpcService1.Protos.RealTimeMarketDataResponse.Parser, new[]{ "EventTime", "EventType", "Symbol", "PriceChangePer", "PriceChange", "WeightedAveragePrice", "FirstTrade", "CloseTime", "QuoteVolume", "BidQuantity", "BidPrice", "AskQuantity", "AskPrice", "OpenTime", "HighPrice", "LastTradeId", "BaseVolume", "LastQuantity", "LastPrice", "OpenPrice", "FirstTradeId", "LowPrice", "TotalTrades" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcService1.Protos.ScripBroadcastReq), global::GrpcService1.Protos.ScripBroadcastReq.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcService1.Protos.ScripBroadcastResponse), global::GrpcService1.Protos.ScripBroadcastResponse.Parser, new[]{ "Message" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The request message containing the user's name.
  /// </summary>
  public sealed partial class ScripDetailsRequest : pb::IMessage<ScripDetailsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScripDetailsRequest> _parser = new pb::MessageParser<ScripDetailsRequest>(() => new ScripDetailsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScripDetailsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcService1.Protos.MarketWatchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripDetailsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripDetailsRequest(ScripDetailsRequest other) : this() {
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripDetailsRequest Clone() {
      return new ScripDetailsRequest(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScripDetailsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScripDetailsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScripDetailsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ScripDetailsResponse : pb::IMessage<ScripDetailsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScripDetailsResponse> _parser = new pb::MessageParser<ScripDetailsResponse>(() => new ScripDetailsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScripDetailsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcService1.Protos.MarketWatchReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripDetailsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripDetailsResponse(ScripDetailsResponse other) : this() {
      symbol_ = other.symbol_;
      price_ = other.price_;
      volume_ = other.volume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripDetailsResponse Clone() {
      return new ScripDetailsResponse(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 2;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Volume" field.</summary>
    public const int VolumeFieldNumber = 3;
    private double volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScripDetailsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScripDetailsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Price != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Price);
      }
      if (Volume != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Price != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Price);
      }
      if (Volume != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScripDetailsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Volume != 0D) {
        Volume = other.Volume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 17: {
            Price = input.ReadDouble();
            break;
          }
          case 25: {
            Volume = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 17: {
            Price = input.ReadDouble();
            break;
          }
          case 25: {
            Volume = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LoginRequest : pb::IMessage<LoginRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcService1.Protos.MarketWatchReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      loginId_ = other.loginId_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "LoginId" field.</summary>
    public const int LoginIdFieldNumber = 1;
    private string loginId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginId {
      get { return loginId_; }
      set {
        loginId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginId != other.LoginId) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginId.Length != 0) hash ^= LoginId.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LoginId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoginId);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LoginId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoginId);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginId);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.LoginId.Length != 0) {
        LoginId = other.LoginId;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LoginId = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LoginId = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcService1.Protos.MarketWatchReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Status = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Status = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ScripBroadcastRequest : pb::IMessage<ScripBroadcastRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScripBroadcastRequest> _parser = new pb::MessageParser<ScripBroadcastRequest>(() => new ScripBroadcastRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScripBroadcastRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcService1.Protos.MarketWatchReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripBroadcastRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripBroadcastRequest(ScripBroadcastRequest other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripBroadcastRequest Clone() {
      return new ScripBroadcastRequest(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScripBroadcastRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScripBroadcastRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScripBroadcastRequest other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RealTimeMarketDataResponse : pb::IMessage<RealTimeMarketDataResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RealTimeMarketDataResponse> _parser = new pb::MessageParser<RealTimeMarketDataResponse>(() => new RealTimeMarketDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RealTimeMarketDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcService1.Protos.MarketWatchReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeMarketDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeMarketDataResponse(RealTimeMarketDataResponse other) : this() {
      eventTime_ = other.eventTime_;
      eventType_ = other.eventType_;
      symbol_ = other.symbol_;
      priceChangePer_ = other.priceChangePer_;
      priceChange_ = other.priceChange_;
      weightedAveragePrice_ = other.weightedAveragePrice_;
      firstTrade_ = other.firstTrade_;
      closeTime_ = other.closeTime_;
      quoteVolume_ = other.quoteVolume_;
      bidQuantity_ = other.bidQuantity_;
      bidPrice_ = other.bidPrice_;
      askQuantity_ = other.askQuantity_;
      askPrice_ = other.askPrice_;
      openTime_ = other.openTime_;
      highPrice_ = other.highPrice_;
      lastTradeId_ = other.lastTradeId_;
      baseVolume_ = other.baseVolume_;
      lastQuantity_ = other.lastQuantity_;
      lastPrice_ = other.lastPrice_;
      openPrice_ = other.openPrice_;
      firstTradeId_ = other.firstTradeId_;
      lowPrice_ = other.lowPrice_;
      totalTrades_ = other.totalTrades_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealTimeMarketDataResponse Clone() {
      return new RealTimeMarketDataResponse(this);
    }

    /// <summary>Field number for the "eventTime" field.</summary>
    public const int EventTimeFieldNumber = 1;
    private string eventTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventTime {
      get { return eventTime_; }
      set {
        eventTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 2;
    private int eventType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priceChangePer" field.</summary>
    public const int PriceChangePerFieldNumber = 4;
    private string priceChangePer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PriceChangePer {
      get { return priceChangePer_; }
      set {
        priceChangePer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priceChange" field.</summary>
    public const int PriceChangeFieldNumber = 5;
    private string priceChange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PriceChange {
      get { return priceChange_; }
      set {
        priceChange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weightedAveragePrice" field.</summary>
    public const int WeightedAveragePriceFieldNumber = 6;
    private string weightedAveragePrice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeightedAveragePrice {
      get { return weightedAveragePrice_; }
      set {
        weightedAveragePrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firstTrade" field.</summary>
    public const int FirstTradeFieldNumber = 7;
    private string firstTrade_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstTrade {
      get { return firstTrade_; }
      set {
        firstTrade_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "closeTime" field.</summary>
    public const int CloseTimeFieldNumber = 8;
    private string closeTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloseTime {
      get { return closeTime_; }
      set {
        closeTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quoteVolume" field.</summary>
    public const int QuoteVolumeFieldNumber = 9;
    private string quoteVolume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QuoteVolume {
      get { return quoteVolume_; }
      set {
        quoteVolume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bidQuantity" field.</summary>
    public const int BidQuantityFieldNumber = 10;
    private string bidQuantity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BidQuantity {
      get { return bidQuantity_; }
      set {
        bidQuantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bidPrice" field.</summary>
    public const int BidPriceFieldNumber = 11;
    private string bidPrice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "askQuantity" field.</summary>
    public const int AskQuantityFieldNumber = 12;
    private string askQuantity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AskQuantity {
      get { return askQuantity_; }
      set {
        askQuantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "askPrice" field.</summary>
    public const int AskPriceFieldNumber = 13;
    private string askPrice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 14;
    private string openTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenTime {
      get { return openTime_; }
      set {
        openTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highPrice" field.</summary>
    public const int HighPriceFieldNumber = 15;
    private string highPrice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HighPrice {
      get { return highPrice_; }
      set {
        highPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastTradeId" field.</summary>
    public const int LastTradeIdFieldNumber = 16;
    private string lastTradeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastTradeId {
      get { return lastTradeId_; }
      set {
        lastTradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseVolume" field.</summary>
    public const int BaseVolumeFieldNumber = 17;
    private string baseVolume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseVolume {
      get { return baseVolume_; }
      set {
        baseVolume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastQuantity" field.</summary>
    public const int LastQuantityFieldNumber = 18;
    private string lastQuantity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastQuantity {
      get { return lastQuantity_; }
      set {
        lastQuantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastPrice" field.</summary>
    public const int LastPriceFieldNumber = 19;
    private string lastPrice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastPrice {
      get { return lastPrice_; }
      set {
        lastPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openPrice" field.</summary>
    public const int OpenPriceFieldNumber = 20;
    private int openPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenPrice {
      get { return openPrice_; }
      set {
        openPrice_ = value;
      }
    }

    /// <summary>Field number for the "firstTradeId" field.</summary>
    public const int FirstTradeIdFieldNumber = 21;
    private int firstTradeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstTradeId {
      get { return firstTradeId_; }
      set {
        firstTradeId_ = value;
      }
    }

    /// <summary>Field number for the "lowPrice" field.</summary>
    public const int LowPriceFieldNumber = 22;
    private int lowPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LowPrice {
      get { return lowPrice_; }
      set {
        lowPrice_ = value;
      }
    }

    /// <summary>Field number for the "totalTrades" field.</summary>
    public const int TotalTradesFieldNumber = 23;
    private int totalTrades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTrades {
      get { return totalTrades_; }
      set {
        totalTrades_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RealTimeMarketDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RealTimeMarketDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventTime != other.EventTime) return false;
      if (EventType != other.EventType) return false;
      if (Symbol != other.Symbol) return false;
      if (PriceChangePer != other.PriceChangePer) return false;
      if (PriceChange != other.PriceChange) return false;
      if (WeightedAveragePrice != other.WeightedAveragePrice) return false;
      if (FirstTrade != other.FirstTrade) return false;
      if (CloseTime != other.CloseTime) return false;
      if (QuoteVolume != other.QuoteVolume) return false;
      if (BidQuantity != other.BidQuantity) return false;
      if (BidPrice != other.BidPrice) return false;
      if (AskQuantity != other.AskQuantity) return false;
      if (AskPrice != other.AskPrice) return false;
      if (OpenTime != other.OpenTime) return false;
      if (HighPrice != other.HighPrice) return false;
      if (LastTradeId != other.LastTradeId) return false;
      if (BaseVolume != other.BaseVolume) return false;
      if (LastQuantity != other.LastQuantity) return false;
      if (LastPrice != other.LastPrice) return false;
      if (OpenPrice != other.OpenPrice) return false;
      if (FirstTradeId != other.FirstTradeId) return false;
      if (LowPrice != other.LowPrice) return false;
      if (TotalTrades != other.TotalTrades) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventTime.Length != 0) hash ^= EventTime.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (PriceChangePer.Length != 0) hash ^= PriceChangePer.GetHashCode();
      if (PriceChange.Length != 0) hash ^= PriceChange.GetHashCode();
      if (WeightedAveragePrice.Length != 0) hash ^= WeightedAveragePrice.GetHashCode();
      if (FirstTrade.Length != 0) hash ^= FirstTrade.GetHashCode();
      if (CloseTime.Length != 0) hash ^= CloseTime.GetHashCode();
      if (QuoteVolume.Length != 0) hash ^= QuoteVolume.GetHashCode();
      if (BidQuantity.Length != 0) hash ^= BidQuantity.GetHashCode();
      if (BidPrice.Length != 0) hash ^= BidPrice.GetHashCode();
      if (AskQuantity.Length != 0) hash ^= AskQuantity.GetHashCode();
      if (AskPrice.Length != 0) hash ^= AskPrice.GetHashCode();
      if (OpenTime.Length != 0) hash ^= OpenTime.GetHashCode();
      if (HighPrice.Length != 0) hash ^= HighPrice.GetHashCode();
      if (LastTradeId.Length != 0) hash ^= LastTradeId.GetHashCode();
      if (BaseVolume.Length != 0) hash ^= BaseVolume.GetHashCode();
      if (LastQuantity.Length != 0) hash ^= LastQuantity.GetHashCode();
      if (LastPrice.Length != 0) hash ^= LastPrice.GetHashCode();
      if (OpenPrice != 0) hash ^= OpenPrice.GetHashCode();
      if (FirstTradeId != 0) hash ^= FirstTradeId.GetHashCode();
      if (LowPrice != 0) hash ^= LowPrice.GetHashCode();
      if (TotalTrades != 0) hash ^= TotalTrades.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EventTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventTime);
      }
      if (EventType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventType);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (PriceChangePer.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PriceChangePer);
      }
      if (PriceChange.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PriceChange);
      }
      if (WeightedAveragePrice.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WeightedAveragePrice);
      }
      if (FirstTrade.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FirstTrade);
      }
      if (CloseTime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CloseTime);
      }
      if (QuoteVolume.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(QuoteVolume);
      }
      if (BidQuantity.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BidQuantity);
      }
      if (BidPrice.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(BidPrice);
      }
      if (AskQuantity.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AskQuantity);
      }
      if (AskPrice.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(AskPrice);
      }
      if (OpenTime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(OpenTime);
      }
      if (HighPrice.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(HighPrice);
      }
      if (LastTradeId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(LastTradeId);
      }
      if (BaseVolume.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(BaseVolume);
      }
      if (LastQuantity.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(LastQuantity);
      }
      if (LastPrice.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(LastPrice);
      }
      if (OpenPrice != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(OpenPrice);
      }
      if (FirstTradeId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(FirstTradeId);
      }
      if (LowPrice != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(LowPrice);
      }
      if (TotalTrades != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(TotalTrades);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EventTime.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventTime);
      }
      if (EventType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventType);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (PriceChangePer.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PriceChangePer);
      }
      if (PriceChange.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PriceChange);
      }
      if (WeightedAveragePrice.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WeightedAveragePrice);
      }
      if (FirstTrade.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FirstTrade);
      }
      if (CloseTime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CloseTime);
      }
      if (QuoteVolume.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(QuoteVolume);
      }
      if (BidQuantity.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BidQuantity);
      }
      if (BidPrice.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(BidPrice);
      }
      if (AskQuantity.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AskQuantity);
      }
      if (AskPrice.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(AskPrice);
      }
      if (OpenTime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(OpenTime);
      }
      if (HighPrice.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(HighPrice);
      }
      if (LastTradeId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(LastTradeId);
      }
      if (BaseVolume.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(BaseVolume);
      }
      if (LastQuantity.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(LastQuantity);
      }
      if (LastPrice.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(LastPrice);
      }
      if (OpenPrice != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(OpenPrice);
      }
      if (FirstTradeId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(FirstTradeId);
      }
      if (LowPrice != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(LowPrice);
      }
      if (TotalTrades != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(TotalTrades);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventTime);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventType);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (PriceChangePer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PriceChangePer);
      }
      if (PriceChange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PriceChange);
      }
      if (WeightedAveragePrice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WeightedAveragePrice);
      }
      if (FirstTrade.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstTrade);
      }
      if (CloseTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloseTime);
      }
      if (QuoteVolume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuoteVolume);
      }
      if (BidQuantity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BidQuantity);
      }
      if (BidPrice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BidPrice);
      }
      if (AskQuantity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AskQuantity);
      }
      if (AskPrice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AskPrice);
      }
      if (OpenTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenTime);
      }
      if (HighPrice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HighPrice);
      }
      if (LastTradeId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastTradeId);
      }
      if (BaseVolume.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BaseVolume);
      }
      if (LastQuantity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastQuantity);
      }
      if (LastPrice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastPrice);
      }
      if (OpenPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpenPrice);
      }
      if (FirstTradeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FirstTradeId);
      }
      if (LowPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LowPrice);
      }
      if (TotalTrades != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotalTrades);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RealTimeMarketDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.EventTime.Length != 0) {
        EventTime = other.EventTime;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.PriceChangePer.Length != 0) {
        PriceChangePer = other.PriceChangePer;
      }
      if (other.PriceChange.Length != 0) {
        PriceChange = other.PriceChange;
      }
      if (other.WeightedAveragePrice.Length != 0) {
        WeightedAveragePrice = other.WeightedAveragePrice;
      }
      if (other.FirstTrade.Length != 0) {
        FirstTrade = other.FirstTrade;
      }
      if (other.CloseTime.Length != 0) {
        CloseTime = other.CloseTime;
      }
      if (other.QuoteVolume.Length != 0) {
        QuoteVolume = other.QuoteVolume;
      }
      if (other.BidQuantity.Length != 0) {
        BidQuantity = other.BidQuantity;
      }
      if (other.BidPrice.Length != 0) {
        BidPrice = other.BidPrice;
      }
      if (other.AskQuantity.Length != 0) {
        AskQuantity = other.AskQuantity;
      }
      if (other.AskPrice.Length != 0) {
        AskPrice = other.AskPrice;
      }
      if (other.OpenTime.Length != 0) {
        OpenTime = other.OpenTime;
      }
      if (other.HighPrice.Length != 0) {
        HighPrice = other.HighPrice;
      }
      if (other.LastTradeId.Length != 0) {
        LastTradeId = other.LastTradeId;
      }
      if (other.BaseVolume.Length != 0) {
        BaseVolume = other.BaseVolume;
      }
      if (other.LastQuantity.Length != 0) {
        LastQuantity = other.LastQuantity;
      }
      if (other.LastPrice.Length != 0) {
        LastPrice = other.LastPrice;
      }
      if (other.OpenPrice != 0) {
        OpenPrice = other.OpenPrice;
      }
      if (other.FirstTradeId != 0) {
        FirstTradeId = other.FirstTradeId;
      }
      if (other.LowPrice != 0) {
        LowPrice = other.LowPrice;
      }
      if (other.TotalTrades != 0) {
        TotalTrades = other.TotalTrades;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventTime = input.ReadString();
            break;
          }
          case 16: {
            EventType = input.ReadInt32();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            PriceChangePer = input.ReadString();
            break;
          }
          case 42: {
            PriceChange = input.ReadString();
            break;
          }
          case 50: {
            WeightedAveragePrice = input.ReadString();
            break;
          }
          case 58: {
            FirstTrade = input.ReadString();
            break;
          }
          case 66: {
            CloseTime = input.ReadString();
            break;
          }
          case 74: {
            QuoteVolume = input.ReadString();
            break;
          }
          case 82: {
            BidQuantity = input.ReadString();
            break;
          }
          case 90: {
            BidPrice = input.ReadString();
            break;
          }
          case 98: {
            AskQuantity = input.ReadString();
            break;
          }
          case 106: {
            AskPrice = input.ReadString();
            break;
          }
          case 114: {
            OpenTime = input.ReadString();
            break;
          }
          case 122: {
            HighPrice = input.ReadString();
            break;
          }
          case 130: {
            LastTradeId = input.ReadString();
            break;
          }
          case 138: {
            BaseVolume = input.ReadString();
            break;
          }
          case 146: {
            LastQuantity = input.ReadString();
            break;
          }
          case 154: {
            LastPrice = input.ReadString();
            break;
          }
          case 160: {
            OpenPrice = input.ReadInt32();
            break;
          }
          case 168: {
            FirstTradeId = input.ReadInt32();
            break;
          }
          case 176: {
            LowPrice = input.ReadInt32();
            break;
          }
          case 184: {
            TotalTrades = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventTime = input.ReadString();
            break;
          }
          case 16: {
            EventType = input.ReadInt32();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            PriceChangePer = input.ReadString();
            break;
          }
          case 42: {
            PriceChange = input.ReadString();
            break;
          }
          case 50: {
            WeightedAveragePrice = input.ReadString();
            break;
          }
          case 58: {
            FirstTrade = input.ReadString();
            break;
          }
          case 66: {
            CloseTime = input.ReadString();
            break;
          }
          case 74: {
            QuoteVolume = input.ReadString();
            break;
          }
          case 82: {
            BidQuantity = input.ReadString();
            break;
          }
          case 90: {
            BidPrice = input.ReadString();
            break;
          }
          case 98: {
            AskQuantity = input.ReadString();
            break;
          }
          case 106: {
            AskPrice = input.ReadString();
            break;
          }
          case 114: {
            OpenTime = input.ReadString();
            break;
          }
          case 122: {
            HighPrice = input.ReadString();
            break;
          }
          case 130: {
            LastTradeId = input.ReadString();
            break;
          }
          case 138: {
            BaseVolume = input.ReadString();
            break;
          }
          case 146: {
            LastQuantity = input.ReadString();
            break;
          }
          case 154: {
            LastPrice = input.ReadString();
            break;
          }
          case 160: {
            OpenPrice = input.ReadInt32();
            break;
          }
          case 168: {
            FirstTradeId = input.ReadInt32();
            break;
          }
          case 176: {
            LowPrice = input.ReadInt32();
            break;
          }
          case 184: {
            TotalTrades = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ScripBroadcastReq : pb::IMessage<ScripBroadcastReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScripBroadcastReq> _parser = new pb::MessageParser<ScripBroadcastReq>(() => new ScripBroadcastReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScripBroadcastReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcService1.Protos.MarketWatchReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripBroadcastReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripBroadcastReq(ScripBroadcastReq other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripBroadcastReq Clone() {
      return new ScripBroadcastReq(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScripBroadcastReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScripBroadcastReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScripBroadcastReq other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ScripBroadcastResponse : pb::IMessage<ScripBroadcastResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScripBroadcastResponse> _parser = new pb::MessageParser<ScripBroadcastResponse>(() => new ScripBroadcastResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScripBroadcastResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcService1.Protos.MarketWatchReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripBroadcastResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripBroadcastResponse(ScripBroadcastResponse other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScripBroadcastResponse Clone() {
      return new ScripBroadcastResponse(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScripBroadcastResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScripBroadcastResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScripBroadcastResponse other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
